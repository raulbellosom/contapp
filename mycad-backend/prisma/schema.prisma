datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

model User {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  photo     String?
  roleId    Int
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vehicles  Vehicle[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model Vehicle {
  id              String           @id @default(uuid())
  typeId          Int
  type            VehicleType      @relation(fields: [typeId], references: [id])
  brand           String
  model           String
  acquisitionDate DateTime
  cost            Float
  mileage         Int
  status          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  createdById     String           // Cambiar a tipo String para usar UUID
  createdBy       User             @relation(fields: [createdById], references: [id])
  serviceHistories ServiceHistory[]
  rentals         Rental[]
  files           File[]
}


model VehicleType {
  id       Int      @id @default(autoincrement())
  typeName String
  vehicles Vehicle[]
}

model ServiceHistory {
  id          String   @id @default(uuid())
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId   String
  serviceDate DateTime
  description String
  cost        Float
  comments    String?
}

model Rental {
  id         String   @id @default(uuid())
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId  String
  client     Client   @relation(fields: [clientId], references: [id])
  clientId   String
  startDate  DateTime
  endDate    DateTime
  dailyRate  Float
  totalCost  Float
  status     String
  comments   String?
}

model Client {
  id           String   @id @default(uuid())
  name         String
  company      String
  email        String
  phoneNumber  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  rentals      Rental[]
}

model File {
  id         String   @id @default(uuid())
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId  String
  fileType   String
  fileUrl    String
  metadata   Json?
  uploadedAt DateTime @default(now())
}
