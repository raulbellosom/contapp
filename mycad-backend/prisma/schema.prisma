datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

model User {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  photo     String?
  roleId    Int
  role      Role     @relation(fields: [roleId], references: [id])
  enabled   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vehicles  Vehicle[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model Vehicle {
  id                String           @id @default(uuid())
  economicNumber    String?
  plateNumber       String?
  serialNumber      String?
  modelId           Int
  model             Model            @relation(fields: [modelId], references: [id])
  acquisitionDate   DateTime
  cost              Float
  mileage           Int
  status            Boolean
  comments          String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  createdById       String
  createdBy         User             @relation(fields: [createdById], references: [id])
  serviceHistories  ServiceHistory[]
  rentals           Rental[]
  images            Image[]          @relation("VehicleImages")
  files             File[]
  enabled           Boolean
  conditions        VehicleCondition[]
}

model VehicleType {
  id        Int      @id @default(autoincrement())
  name      String
  enabled   Boolean
  models    Model[]
}

model VehicleBrand {
  id        Int      @id @default(autoincrement())
  name      String
  enabled   Boolean
  models    Model[]
}

model Model {
  id        Int      @id @default(autoincrement())
  name      String
  year      Int
  typeId    Int
  brandId   Int
  enabled   Boolean
  type      VehicleType  @relation(fields: [typeId], references: [id])
  brand     VehicleBrand @relation(fields: [brandId], references: [id])
  vehicles  Vehicle[]
}

model ServiceHistory {
  id          String   @id @default(uuid())
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId   String
  serviceDate DateTime
  description String
  cost        Float
  comments    String?
  enabled     Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Rental {
  id         String   @id @default(uuid())
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId  String
  client     Client   @relation(fields: [clientId], references: [id])
  clientId   String
  startDate  DateTime
  endDate    DateTime
  dailyRate  Float
  totalCost  Float
  status     String
  comments   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  enabled    Boolean
}

model Client {
  id           String   @id @default(uuid())
  name         String
  company      String
  email        String
  phoneNumber  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  enabled      Boolean
  rentals      Rental[]
}

model File {
  id         String   @id @default(uuid())
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId  String
  fileType   String
  fileUrl    String
  metadata   Json?
  enabled    Boolean
  createdAt  DateTime @default(now())
  uploadedAt DateTime @default(now())
}

model Condition {
  id        Int       @id @default(autoincrement())
  name      String
  enabled   Boolean
  vehicles  VehicleCondition[]
}

model VehicleCondition {
  id          Int       @id @default(autoincrement())
  vehicleId   String
  conditionId Int
  vehicle     Vehicle   @relation(fields: [vehicleId], references: [id])
  condition   Condition @relation(fields: [conditionId], references: [id])

  @@unique([vehicleId, conditionId])
}

model Image {
  id         String    @id @default(uuid())
  url        String
  thumbnail  String?
  medium     String?
  large      String?
  type       String
  metadata   Json?
  createdAt  DateTime  @default(now())
  enabled    Boolean

  vehicle    Vehicle?  @relation("VehicleImages", fields: [vehicleId], references: [id])
  vehicleId  String?

  @@index([vehicleId])
}