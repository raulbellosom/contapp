generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String            @id @default(uuid())
  firstName   String
  lastName    String
  email       String            @unique
  userName    String            @unique
  phone       String?
  password    String
  status      Boolean?
  roleId      Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  enabled     Boolean           @default(true)
  role        Role              @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  photo       UserImage[]       @relation("UserImages")
  accounts    Account[]         @relation("UserAccounts")
  transactions Transaction[]    @relation("UserTransactions")
  recurringPayments RecurringPayment[] @relation("UserRecurringPayments")

  @@index([roleId], map: "User_roleId_fkey")
}

model Account {
  id          String            @id @default(uuid())
  name        String
  type        AccountType
  balance     Float             @default(0.0)
  color       String            @default("#FFFFFF") // Representa el color visual de la cuenta
  bankId      String?
  bank        Bank?             @relation("BankAccounts", fields: [bankId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  userId      String
  user        User              @relation("UserAccounts", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transactions Transaction[]    @relation("AccountTransactions")
  recurringPayments RecurringPayment[] @relation("AccountRecurringPayments")

  @@index([userId])
  @@index([bankId])
}

model Transaction {
  id          String            @id @default(uuid())
  amount      Float
  date        DateTime          @default(now())
  description String?
  categoryId  String?
  category    Category?         @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId   String
  account     Account           @relation("AccountTransactions", fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
  user        User              @relation("UserTransactions", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([accountId])
  @@index([categoryId])
  @@index([userId])
}

model Category {
  id          String            @id @default(uuid())
  name        String
  type        TransactionType
  description String?
  transactions Transaction[]

  RecurringPayment RecurringPayment[]
}

model Bank {
  id          String            @id @default(uuid())
  name        String            @unique // Nombre de la institución bancaria
  country     String?           // País de la institución
  logo        String?           // URL del logo del banco (opcional para fines visuales)
  accounts    Account[]         @relation("BankAccounts")
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Role {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  permissions RolePermission[]
  users       User[]
}

model Permission {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String?
  roles       RolePermission[]
}

model RolePermission {
  id           Int              @id @default(autoincrement())
  roleId       Int
  permissionId Int
  permission   Permission        @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role         Role              @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([roleId, permissionId])
  @@index([permissionId], map: "RolePermission_permissionId_fkey")
}

model UserImage {
  id        String              @id @default(uuid())
  url       String
  thumbnail String?
  type      String
  metadata  Json?
  enabled   Boolean             @default(true)
  createdAt DateTime            @default(now())
  userId    String?
  user      User?               @relation("UserImages", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

model RecurringPayment {
  id           String            @id @default(uuid())
  name         String            // Nombre del pago recurrente
  amount       Float
  frequency    Frequency         // Enum para la periodicidad
  startDate    DateTime          // Fecha de inicio del pago recurrente
  endDate      DateTime?         // Fecha de término (opcional)
  accountId    String
  account      Account           @relation("AccountRecurringPayments", fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId   String?
  category     Category?         @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String
  user         User              @relation("UserRecurringPayments", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@index([accountId])
  @@index([categoryId])
  @@index([userId])
}

enum AccountType {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  SAVINGS_ACCOUNT
  INVESTMENT
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum Frequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  YEARLY
}
